generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           Int       @id @default(autoincrement())
  nombre       String
  email        String    @unique
  telefono     String?
  direccion    String?
  tipo         TipoUsuario @default(ESTUDIANTE)
  prestamos    Prestamo[]
  reservas     Reserva[]
  multas       Multa[]
  createdAt    DateTime  @default(now())
}

enum TipoUsuario {
  ESTUDIANTE
  PROFESOR
  ADMINISTRATIVO
  BIBLIOTECARIO
}

model Libro {
  id             Int            @id @default(autoincrement())
  titulo         String
  isbn           String         @unique
  anioPublicacion Int
  editorialId    Int
  editorial      Editorial      @relation(fields: [editorialId], references: [id])
  categoriaId    Int
  categoria      Categoria      @relation(fields: [categoriaId], references: [id])
  autores        LibroAutor[]
  ejemplares     Ejemplar[]
  createdAt      DateTime       @default(now())
}

model Editorial {
  id        Int      @id @default(autoincrement())
  nombre    String
  pais      String?
  libros    Libro[]
}

model Categoria {
  id        Int      @id @default(autoincrement())
  nombre    String
  descripcion String?
  libros    Libro[]
}

model Autor {
  id        Int      @id @default(autoincrement())
  nombre    String
  nacionalidad String?
  libros    LibroAutor[]
}

model LibroAutor {
  libroId   Int
  autorId   Int
  libro     Libro   @relation(fields: [libroId], references: [id])
  autor     Autor   @relation(fields: [autorId], references: [id])
  @@id([libroId, autorId])
}

model Ejemplar {
  id        Int     @id @default(autoincrement())
  codigo    String  @unique
  estado    EstadoEjemplar @default(DISPONIBLE)
  libroId   Int
  libro     Libro   @relation(fields: [libroId], references: [id])
  prestamos Prestamo[]
  reservas  Reserva[]
}

enum EstadoEjemplar {
  DISPONIBLE
  PRESTADO
  RESERVADO
  DANIADO
}

model Prestamo {
  id          Int       @id @default(autoincrement())
  usuarioId   Int
  ejemplarId  Int
  fechaInicio DateTime
  fechaFin    DateTime
  devuelto    Boolean   @default(false)
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  ejemplar    Ejemplar  @relation(fields: [ejemplarId], references: [id])
  multa       Multa?
}

model Reserva {
  id          Int       @id @default(autoincrement())
  usuarioId   Int
  ejemplarId  Int
  fecha       DateTime  @default(now())
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  ejemplar    Ejemplar  @relation(fields: [ejemplarId], references: [id])
}

model Multa {
  id         Int       @id @default(autoincrement())
  monto      Float
  pagada     Boolean   @default(false)
  prestamoId Int       @unique
  usuarioId  Int
  prestamo   Prestamo  @relation(fields: [prestamoId], references: [id])
  usuario    Usuario   @relation(fields: [usuarioId], references: [id])
}

model Empleado {
  id         Int      @id @default(autoincrement())
  nombre     String
  puesto     String
  email      String   @unique
  horario    Horario?
}

model Horario {
  id         Int      @id @default(autoincrement())
  empleadoId Int      @unique
  dias       String
  horaInicio String
  horaFin    String
  empleado   Empleado @relation(fields: [empleadoId], references: [id])
}
